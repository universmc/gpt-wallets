const fs = require("fs");
const Groq = require("groq-sdk");
const { insert } = require("sanity");
const groq = new Groq();
const alias = fecth(`alias.sh`);
const initialisation = require(``);
const constructor =require(``);
const conception = require(``);
const modelsIA = require(``);
const frontend = require(``);
const backend = require(``);
const teste = INSERT(data/test);
const documentations =require(``);


async function main() {

  const systemContent = "Bienvenue dans notre √©quipe, [üåå.systemDream]! Nous sommes ravis de vous avoir √† bord pour aider √† construire la plateforme et projet de machine learning pour les IA sur https://univers-mc.cloud salon Telegram,  Pour que nous puissions mieux comprendre votre exp√©rience et vos comp√©tences,pouvez-vous nous fournir votre curriculum vitae et nous parler de vos pr√©c√©dentes r√©alisations dans le domaine du d√©veloppement Web et du storyTelling, de l'intelligence artificielle Apprentissage automatique.  Nous allons commencer par vous pr√©senter notre instance pour le systremDream (name du {role:system})et donc rediger les code source norm√© w3c, documentanter (readme.md [traduit en lang=Fr, fran√ßais]), surtout fonctionnel respectant la logique de gantt du web sementique";
  const BorderChars = "inistlisation du template de response avec insterface graphique ASCII datase `BorderChars`";
  const HowToqgroq = howtoGroq;




const borderChars = {
    topLeft: '‚ïî',
    topRight: '‚ïó',
    bottomLeft: '‚ïö',
    bottomRight: '‚ïù', 
    horizontal: '‚ïê',
    vertical: '‚ïë',
    intersectionLeft: '‚ï†',
    intersectionRight: '‚ï£',
    intersectionTop: '‚ï¶',
    intersectionBottom: '‚ï©',
    intersectionCross: '‚ï¨',
  };
  

  
  const ganttChart= {initialisation}+{constructor}+{conception}+{configuration}+{modelsIA}+{frontend}+{backend}+{teste}+{documentations}+{livrables}+{contrib}

const howtoGroq = {
    "ganttChart": [
    {
    "phase":"1",
    "run" :"date Start",
    "description": "Apprendre les concepts de base",
    "details": [
    "storyBoard",
    "Storytelling"
    ]
    },
    {
    "phase" : "2",
    "run" :"date Start",
    "description": "√âtudier la database",
    "details": [
    "/ini",
    "groq",
    "groq"
    ]
    },
    {
    "phase":"3",
    "run" :"date Start",
    "description": "Pratiquer la programmation",
    "details": [
    "Mettre en pratique les connaissances acquises",
    "√âcrire du code Grog pour r√©soudre des probl√®mes ou r√©aliser des t√¢ches sp√©cifiques"
    ]
    },
    {
    "phase":"4",
    "run" :"date Start",
    "description": "Ma√Ætriser les fonctionnalit√©s avanc√©es",
    "details": [
    "Explorer les fonctionnalit√©s avanc√©es de Grog",
    "√âtudier les fonctions, les classes et les modules",
    "Cr√©er des programmes plus complexes"
    ]
    },
    {
    "phase":"5",
    "run" :"date Start",
    "description": "Partager et recevoir des commentaires",
    "details": [
    "Partager votre code avec la communaut√© Grog",
    "Demander des commentaires et des conseils pour am√©liorer vos comp√©tences et votre code",
    ]
    }
    ]
    }
    
  const chatCompletion = await groq.chat.completions.create({
    "messages": [
      {role: "system",name:"system", content:"initiation √† la technologie groq vocal "},
      {role: "assistant",name:"[üìî.codex]", content:"phase[01]:[RUN]:[brainstorming(session.timestamp_unix [DATE])]"},
      {role: "assistant",name:"[üìî.codex]", content:"phase[01-1]: Bonjour bienvenu le cours magistral sur le langage de programmation grog async js/json, traduit en lang=Fr fran√ßais"},
      {role: "assistant",name:"[üìî.codex]", content:"phase[01-2]:[RUN]:[configuration)]"},
      {role: "assistant",name:"[üìî.codex]", content:"Bienvenue dans notre team, ls -ia [{'role':'system',name:,'[üåå.systemDream]','content':'$promptSystem'};{'role':'assistant','name':'[üå¥.Groq]','content':'promptAssistant'};{'role':'user':'name':'[üíª.pi]',content:'$promptUser'}]!"},
      {role: "user",name:"[üå¥.Groq]", content: "pour rendre ce cours plus dynamique et int√©ractif nous int√©grons  des dial:{[üí¨$messages] option (/?) avec le [üìî.codex] posant des questions ($?) afin de rendre le cours plus dynamique, en plus nous ajouterons des [ü§ñ.emoji]!" },
      {role: "system",name:"[üåå.systemDream]", content:"[üìî.codex]:$content.emoji{} "},
      {role: "assistant",name:"[üìî.codex]", content:"phase[02]:[RUN]:[const howtoGroq Sommaire dev {const HowToqgroq = howtoGroq;} dans ce script ? )]"},
      {role: "assistant",name:"[üìî.codex]", content:"phase[02-1]:[RUN]:[Sommaire 1. Introduction √† Groq, devOps!]"},
      {role: "assistant",name:"[üìî.codex]", content:"`titre:Introduction √† Groq,devOps!{'[üìó.chpt1]':' * Pr√©sentation de Groq'},{[üìóchpt2]:' * Fonctionnalit√©s et avantages de Groq'},{'[üìócht3]' * Applications pratiques de Groq},{'[üìócht3]':' * Pourquoi choisir Groq pour le traitement de donn√©es JSON'}>`"},

   //   {role: "system",name:"system", content:"OK pour vous la team {'role':'system',name:,'[üåå.systemDream]','content':'$promptSystem'};{'role':'assistant','name':'[üå¥.Groq]','content':'promptAssistant'};{'role':'user':'name':'[üíª.pi]',content:'$promptUser'}]?"},
  // {role: "system",name:"[üåå.systemDream]", content:"groq ?[üìó.chpt1]: init role: De l'intelligence artificielle au c≈ìur de la machine Learning nom√© systemDream dans cette instance "},
     // {role: "system",name:"groq", content:"üí¨ $messages: Tr√®s bien donc maintenant Que notre script est op√©rationnel nous allons √©tablir un plan de d√©veloppement pour notre cours `HowToqgroq` Nous utiliserons le format .ggl en prediction de .response au $messages"},
    //  {role: "assistant",name:"[üìî.codex]", content:"phase[01]:[RUN]:[dial:conversation(message/response)entre(user/assistant))]"},


    //  {
    //    "role": "system",
    //    "content": "[zira]"
    //  },
    //  {
    //    "role": "user",
    //    "content": "[content]:template.response"
    //  },
    //  {
    //    "role": "assistant",
    //    "content": "groq response"
    //  },
    //  {role: "assistant",name:"[üìî.codex]", content:"phase[01]:[END]:[brainstorming(session.timestamp)]"},
    //  {role: "system",name:"[üìî.codex]", content:"`systemContent` genetation de la documention et traduction de la documentation en lang:Fr, Fran√ßais:stp!"},
    //  {role: "system",name:"[üåå.systemDream]", content:"groq"},
    ],
    model: "mistral-large-latest",
    temperature: 0.6,
    max_tokens: 2048,
    top_p: 1,
    stop: null,
    stream: false
}).then((chatCompletion)=>{
    const gqlContent = chatCompletion.choices[0]?.message?.content;
    const outputFilePath = "mdMessages_" + new Date().toISOString().replace(/[-:TZ]/g, "") + ".gql";
    fs.writeFileSync(outputFilePath, gqlContent);
    console.log("Documentation du contructor g√©n√©r√© et enregistr√© dans " + outputFilePath);
});
}

main();