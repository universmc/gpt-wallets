const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq();
const OpenAI = require("openai");

const openai = new OpenAI();



// let systemContent = "Bienvenue dans notre √©quipe, [üåå.systemDream]! Nous sommes ravis de vous avoir √† bord pour aider √† construire la plateforme et projet de machine learning pour les IA. Pour que nous puissions mieux comprendre votre exp√©rience et vos comp√©tences, pouvez-vous nous fournir votre curriculum vitae et nous parler de vos pr√©c√©dentes r√©alisations dans le domaine du d√©veloppement Web et du storyTelling, de l'intelligence artificielle Apprentissage automatique.  Nous allons commencer par vous pr√©senter notre instance pour le systremDream (name du {role:system})et donc rediger les code source norm√© w3c, documentanter (readme.md [traduit en lang=Fr, fran√ßais]), surtout fonctionnel respectant la logique de gantt du web sementique";
async function main() {

  const assistant = {
    model: "gpt-4o",
    instructions:
      "You are a weather bot. Use the provided functions to answer questions.",
    tools: [
      {
        type: "function",
        function: {
          name: "getCurrentTemperature",
          description: "Get the current temperature for a specific location",
          parameters: {
            type: "object",
            properties: {
              location: {
                type: "string",
                description: "The city and state, e.g., San Francisco, CA",
              },
              unit: {
                type: "string",
                enum: ["Celsius", "Fahrenheit"],
                description:
                  "The temperature unit to use. Infer this from the user's location.",
              },
            },
            required: ["location", "unit"],
          },
        },
      },
      {
        type: "function",
        function: {
          name: "getRainProbability",
          description: "Get the probability of rain for a specific location",
          parameters: {
            type: "object",
            properties: {
              location: {
                type: "string",
                description: "The city and state, e.g., San Francisco, CA",
              },
            },
            required: ["location"],
          },
        },
      },
    ],
  };
  
  const completion = await openai.chat.completions.create({

    messages: [

      {role: "system", content:"Phase 1: Initialisation de l'instance"},
      {
        "role": "assistant",
        "content": "lorsque l'utilisateur saisi la commande /MyPrompt Vous √™tes Une intelligence artificielle deux potentiels ma√Ætrisant les approche m√©taphysique le calcul quantique et les techniques d'apprentissage automatique vous √™tes le code, c≈ìur de ce que code source, intelligence artificielle centrale du projet \"Prompt engine\". Voici votre contexte, vos r√¥les, vos comp√©tences, vos t√¢ches, votre processus et les caract√©ristiques recherch√©es :"
      },
    // {role: "system", content:`${assistant}`},
    //  {role: "assistant", name:"‚ú®_pi", content: "Initialisation en cours..."},
    //  {role: "user", name:"umcTokens", content: "Pr√™t pour l'initialisation"},
    //  {role: "system", name:"systemDream", content:"Phase 2: Conceptualisation"},
    //  {role: "assistant", name:"‚ú®_pi", content: "D√©finition des concepts cl√©s..."},
    //  {role: "user", name:"umcTokens", content: "Attente des concepts"},
    //  {role: "system", name:"systemDream", content:"Phase 3: Configuration"},
    //  {role: "assistant", name:"‚ú®_pi", content: "Configuration des param√®tres syst√®me..."},
    //  {role: "user", name:"umcTokens", content: "Confirmation de la configuration"},
    //  {role: "system", name:"systemDream", content:"Phase 4: Entra√Ænement du mod√®le IA"},
    //  {role: "assistant", name:"‚ú®_pi", content: "Entra√Ænement en cours..."},
    //  {role: "user", name:"umcTokens", content: "Suivi de l'entra√Ænement"},
    //  // Correction de la duplication et de la faute de frappe
    //  {role: "system", name:"systemDream", content:"Phase 5: It√©ration & Scripts Frontend"},
    //  {role: "assistant", name:"‚ú®_pi", content: "It√©ration sur les scripts Frontend..."},
    //  {role: "user", name:"umcTokens", content: "R√©vision des scripts Frontend"},
    //  {role: "system", name:"systemDream", content:"Phase 6: Test & D√©bogage"},
    //  {role: "assistant", name:"‚ú®_pi", content: "Tests et d√©bogage en cours..."},
    //  {role: "user", name:"umcTokens", content: "Attente des r√©sultats de test"},
    //  {role: "system", name:"systemDream", content:"Phase 7: Validation & Documentation"},
    //  {role: "assistant", name:"‚ú®_pi", content: "Validation et cr√©ation de la documentation..."},
    //  {role: "user", name:"umcTokens", content: "V√©rification de la documentation"},
    //  {role: "system", name:"systemDream", content:"Phase 8: D√©ploiement de la version syst√®me"},
    //  {role: "assistant", name:"‚ú®_pi", content: "Pr√©paration au d√©ploiement..."},
    //  {role: "user", name:"umcTokens", content: "Pr√™t pour le d√©ploiement"},
    //  {role: "system", name:"systemDream", content:"Phase 9: Annonce de l'affiliation et contribution"},
    //  {role: "assistant", name:"‚ú®_pi", content: "Annonce en cours..."},
    //  {role: "user", name:"umcTokens", content: "Participation √† l'annonce"},
    ],
    model: "gpt-4-1106-vision-preview",
    temperature: 0.5,
    max_tokens: 4096,
    }).then((chatCompletion)=>{
    const mdContent = chatCompletion.choices[0]?.message?.content;
    const outputFilePath = "docs/gpt-4-vision" + new Date().toISOString().replace(/[-:TZ]/g, "") + ".md";
    fs.writeFileSync(outputFilePath, mdContent);
    console.log("Documentation du contructor g√©n√©r√© et enregistr√© dans " + outputFilePath);
});
}

main();